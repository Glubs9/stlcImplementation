open import Agda.Primitive

-- agda stdlib is giving me trouble so this will do for now
-- note: this isn't de bruijn, this is just the first thing
-- I thought of
data Id : Set where
    n : Id
    s : Id -> Id

-- need to define equality on Id, but only need for cases anyway
case-eq : {n : Level} {b : Set n} -> Id -> Id -> b -> b -> b
case-eq n n b _ = b
case-eq (s n1) (s n2) b1 b2 = case-eq n1 n2 b1 b2 
case-eq _ _ _ b = b

infix 5 l_a_
infix 7 _*_
infix 9 `_

data Term : Set where
  `_ : Id -> Term
  l_a_ : Id -> Term -> Term
  _*_ : Term -> Term -> Term

id-func : Term
id-func = l n a ` n

inf : Term
inf = (l n a ` n) * (l n a ` n)

infix 9 _[_:=_]

_[_:=_] : Term -> Id -> Term -> Term
(` x)   [ y := V ] = case-eq x y V (` x)
(A * B) [ y := V ] = ( A [ y := V ] ) * ( b [ y := V ] )
